* write a document.py
** downloaded document in pending/closed status should be read only
* FieldSet could be a different collection
* ScriveFile object
** read only
** should not be consturctable by users
** id field
** name field
** needs a method to download target file
** needs some access to oauth credentials
* Signatory needs attachments field
** research why it is updatable
** read only set of attachments
** attachment
*** read only
*** requested_name field (name requested by author)
*** description (filled by author)
*** ScriveFile object
* Signatory needs a csv field
** research update validation
** list of lists of unicode objects
* Signatory needs a userid field
** maybe a whole User type?
* add tests for failing _from_json_obj()
* add field_handler
* from_json should trigger read_only
* write a documentation from code and get someone from scrive to review it
* update __init__.py
* add tests
* write a documentation
* add setup.py
* port to other python versions
* write utility functions
** field
*** set_single_placement
*** add_placement
* polish type_value_unifier
** move it to utils
* MaybeTipSide could use nullable
* Document.number_of_days_to_remind needs info that it's clipped on the backend to max of days to sign
* write version of set (for signatories and fields) and dict (for tags) that can be made read only and invalid
** remaining attributes
*** __rand__
*** __rxor__
*** __ror__
*** __rsub__
** add type checking for set methods (so ScriveSet().update(2) gives a nice error)
** pickling support
* Document should not have a publically accesible ctor
* Scrive
** get call
*** handle non-existing document
** update call
*** check if id is present - if not exception
*** check status before making request
*** figure out how objectversion works
** create_from_file
*** handle exceptions
** create_from_template
** ready
** downloading files
** handle generic request exceptions
*** passing to all ScriveObjects
** tests
*** against mocked flask app
*** against staging
* __str__ methods for scrive objects
